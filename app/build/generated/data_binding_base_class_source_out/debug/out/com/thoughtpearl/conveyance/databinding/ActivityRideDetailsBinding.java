// Generated by view binder compiler. Do not edit!
package com.thoughtpearl.conveyance.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.gms.maps.MapView;
import com.google.android.material.appbar.AppBarLayout;
import com.thoughtpearl.conveyance.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityRideDetailsBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final TextView Amount;

  @NonNull
  public final AppBarLayout appbar;

  @NonNull
  public final Button completeRide;

  @NonNull
  public final TextView dateText;

  @NonNull
  public final MapView mapView;

  @NonNull
  public final TextView rideAmount;

  @NonNull
  public final TextView rideDate;

  @NonNull
  public final TextView rideDistance;

  @NonNull
  public final TextView rideDistanceLabel;

  @NonNull
  public final TextView rideDuration;

  @NonNull
  public final TextView rideDurationLabel;

  @NonNull
  public final LinearLayout rideLayout;

  @NonNull
  public final TextView ridePurpose;

  @NonNull
  public final TextView ridePurposeLabel;

  @NonNull
  public final LinearLayout rowOne;

  @NonNull
  public final LinearLayout rowTwo;

  @NonNull
  public final Toolbar toolbar;

  private ActivityRideDetailsBinding(@NonNull RelativeLayout rootView, @NonNull TextView Amount,
      @NonNull AppBarLayout appbar, @NonNull Button completeRide, @NonNull TextView dateText,
      @NonNull MapView mapView, @NonNull TextView rideAmount, @NonNull TextView rideDate,
      @NonNull TextView rideDistance, @NonNull TextView rideDistanceLabel,
      @NonNull TextView rideDuration, @NonNull TextView rideDurationLabel,
      @NonNull LinearLayout rideLayout, @NonNull TextView ridePurpose,
      @NonNull TextView ridePurposeLabel, @NonNull LinearLayout rowOne,
      @NonNull LinearLayout rowTwo, @NonNull Toolbar toolbar) {
    this.rootView = rootView;
    this.Amount = Amount;
    this.appbar = appbar;
    this.completeRide = completeRide;
    this.dateText = dateText;
    this.mapView = mapView;
    this.rideAmount = rideAmount;
    this.rideDate = rideDate;
    this.rideDistance = rideDistance;
    this.rideDistanceLabel = rideDistanceLabel;
    this.rideDuration = rideDuration;
    this.rideDurationLabel = rideDurationLabel;
    this.rideLayout = rideLayout;
    this.ridePurpose = ridePurpose;
    this.ridePurposeLabel = ridePurposeLabel;
    this.rowOne = rowOne;
    this.rowTwo = rowTwo;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityRideDetailsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityRideDetailsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_ride_details, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityRideDetailsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.Amount;
      TextView Amount = ViewBindings.findChildViewById(rootView, id);
      if (Amount == null) {
        break missingId;
      }

      id = R.id.appbar;
      AppBarLayout appbar = ViewBindings.findChildViewById(rootView, id);
      if (appbar == null) {
        break missingId;
      }

      id = R.id.completeRide;
      Button completeRide = ViewBindings.findChildViewById(rootView, id);
      if (completeRide == null) {
        break missingId;
      }

      id = R.id.dateText;
      TextView dateText = ViewBindings.findChildViewById(rootView, id);
      if (dateText == null) {
        break missingId;
      }

      id = R.id.mapView;
      MapView mapView = ViewBindings.findChildViewById(rootView, id);
      if (mapView == null) {
        break missingId;
      }

      id = R.id.rideAmount;
      TextView rideAmount = ViewBindings.findChildViewById(rootView, id);
      if (rideAmount == null) {
        break missingId;
      }

      id = R.id.rideDate;
      TextView rideDate = ViewBindings.findChildViewById(rootView, id);
      if (rideDate == null) {
        break missingId;
      }

      id = R.id.rideDistance;
      TextView rideDistance = ViewBindings.findChildViewById(rootView, id);
      if (rideDistance == null) {
        break missingId;
      }

      id = R.id.rideDistanceLabel;
      TextView rideDistanceLabel = ViewBindings.findChildViewById(rootView, id);
      if (rideDistanceLabel == null) {
        break missingId;
      }

      id = R.id.rideDuration;
      TextView rideDuration = ViewBindings.findChildViewById(rootView, id);
      if (rideDuration == null) {
        break missingId;
      }

      id = R.id.rideDurationLabel;
      TextView rideDurationLabel = ViewBindings.findChildViewById(rootView, id);
      if (rideDurationLabel == null) {
        break missingId;
      }

      id = R.id.ride_layout;
      LinearLayout rideLayout = ViewBindings.findChildViewById(rootView, id);
      if (rideLayout == null) {
        break missingId;
      }

      id = R.id.ridePurpose;
      TextView ridePurpose = ViewBindings.findChildViewById(rootView, id);
      if (ridePurpose == null) {
        break missingId;
      }

      id = R.id.ridePurposeLabel;
      TextView ridePurposeLabel = ViewBindings.findChildViewById(rootView, id);
      if (ridePurposeLabel == null) {
        break missingId;
      }

      id = R.id.rowOne;
      LinearLayout rowOne = ViewBindings.findChildViewById(rootView, id);
      if (rowOne == null) {
        break missingId;
      }

      id = R.id.rowTwo;
      LinearLayout rowTwo = ViewBindings.findChildViewById(rootView, id);
      if (rowTwo == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      return new ActivityRideDetailsBinding((RelativeLayout) rootView, Amount, appbar, completeRide,
          dateText, mapView, rideAmount, rideDate, rideDistance, rideDistanceLabel, rideDuration,
          rideDurationLabel, rideLayout, ridePurpose, ridePurposeLabel, rowOne, rowTwo, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
